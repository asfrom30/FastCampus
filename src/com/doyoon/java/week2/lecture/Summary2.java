package com.doyoon.java.week2.lecture;

public class Summary2 {
	
	public Summary2() {
		/* 객체 지향 설계 */
		
		/* ERD(entity relationship diagram)보다 화면을 먼저 구상해야 한다. */
		/* 객체 지향에서 View를 생각한뒤에 해야 하는 것은 데이터 설계이다.
		 * 게시판을 예로 들자면,
		 * 목록, 상세보기, 글쓰기, 수정하기 View가 있다.
		 * 여기서 모든 Data가 들어가는 Page는 상세보기이다. 상세보기를 보고 어떤 BBS클래스가 어떤 Data구조(변수의 집합)를 갖을지 구상한다.
		 * 이것을 UO, DAO, MODEL, DATA MODELING
		 */
		
		/* 데이터 구조는 구분자를 넣어서 데이터를 구분한다. */
		
		/* MVP 모델은 WEB의 MVC 모델로 부터 가져왔다.
		 * MVC 모델은 V와 C가 관계를 맺고 있따.
		 * MODEL : 데이터를 읽고 쓰는(BBS를 조작)
		 * PRESENTER : 모든 로직
		 * VIEW : 화면에 나타나는 것에 관계 */
		
		/* 결국 객체 지향이라는 것은 클래스간의 종속관계를 가능한 느슨하게 구성하는 것이다.(강한 커플링 방지)
		 * 서로 클래스나 객체를 참조하고 있다면 해당 클래스를 사용시 참조하는 다른 객체를 꼭 필요로 한다.
		 * (여기서 참조를 하고 있다는 의미는 new를 사용하여 객체로 만들어서 참조, 이용)
		 * 서로 객체를 참조하고 있지 않으면 코드의 재사용성이 늘어나고, 클래스별로 독립적인 테스트가 가능하다.(관계를 맺으면 상대 클래스가 있어야만 테스트가 가능)
		 * POJO가 가장 독립적인 코드, 따라서 POJO로 설계된 클래스가 많을 수록 좋은 객체지향을 갖는다.
		 * 가장 작은 단위까지 쪼개서 독립적인 클래스를 만든다.
		 * 서로 종속성을 없애야만 재사용이 가능하다.
		 */
		
		/* 우리나라는 기능별로 분리하기 때문에  회원가입, 지도를 보여주는 파트 이런식으로 나누어져 있어서 한 팀에서 MVP를 모두 하게 된다.
		 * 외국에서는 속성별로 분리하기 때문에 MODEL에서 회원가입, 지도에 관한 MODEL을 모두 만들고, VIEW에서 회원가입, 지도에 관한 VIEW를 모두 만든다.
		 * 객체지향으로 설계하게 되면 BBS를 다른 프로젝트에서 사용하게 될때 가져다가 써도 쉽게 사용할 수 있다. (다른 객체들과 관계를 맺고 있지 않기 때문에)
		 */
		
		/* 결국 설계 효율을 높이기 위해서는 종속성을 없애야한다. (new를 선언하거나, 객체를 참조함으로서 생긴다.) */
		
		/* 같은 클래스내에서 함수간 종속이 생기는 경우도 발생하는데 */
		/* 아래 케이스처럼 함수를 다른 함수에 가져다가 쓰는 것을 지양하고, 순차적으로 처리하는 함수를 새로 만든다. processA와 processB의 종속성을 없앤다.
		 * processTotal(){
		 * 	processA()
		 *  processB()
		 * }
		 * 
		 * processB(){
		 * 	 processA()
		 *  //프로세스 B에 대한 코드
		 * }
		 */
		
		/* 실제로 INTERFACE나 ABSTRACT의 수는 클래스만큼 또는 약간 적게 있다. */
		/* 이부분이 번거롭긴 하다. */
		
		/* ABSTRACT를 상속 받으면 강제로 구현을 해야 하니까 함수명을 바꿀 수 없고, 다른 기능에서 참조해서 쓸수 있다. */
		/* 설계가 먼저 이루어지면 구현단에서 참조만 해서 사용하면 되므로,
		/* 절차지향 -> 객체지향 -> 함수지향(함수를 객체처럼 쓰겠다.) */
	}
}
